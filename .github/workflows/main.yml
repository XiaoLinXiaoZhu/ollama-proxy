name: 'publish'

on:
  push:
    tags:
          - 'v**'  # 触发标签推送，例如：v0.0.6

# This workflow will trigger on each push to the `release` branch to create or update a GitHub release, build your app, and upload the artifacts to the release.

jobs:
  publish-bun-app:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'ubuntu-22.04'
            build_command: 'bun run build-all-linux && bun run build-all-darwin'
          - platform: 'windows-latest'
            build_command: 'bun run build-all'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
      
      # ==============================
      # 📦 获取版本号 - 从git标签获取
      # ==============================
      - name: Get version from git tag
        id: get-version
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          echo "Found version: ${GITHUB_REF#refs/tags/v}"
          
      - uses: oven-sh/setup-bun@v2

      # ==============================
      # 📦 下载 BUN 依赖
      # ==============================
      - name: install frontend dependencies
        run: bun install

      # ==============================
      # 🏗️ Check BUN 状态
      # ==============================
      - name: Check BUN version
        run: bun --version

      # ==============================
      # 🏗️ 构建 二进制文件
      # ==============================
      - name: Build binaries
        run: ${{ matrix.build_command }}

      # ==============================
      # 📦 上传构建产物作为 artifacts
      # ==============================
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.platform }}
          path: dist/*

      # ==============================
      # 📦 下载所有构建产物
      # ==============================
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      # ==============================
      # 📦 创建 Release
      # ==============================
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: 'App v${{ env.VERSION }}'
          body: |
            ## Ollama Proxy v${{ env.VERSION }}
            
            See the assets to download this version and install.
            
            ## 适用平台
            
            ### Linux
            - `ollama-proxy-linux-x64`: Linux x64 (现代CPU，2013年后)
            - `ollama-proxy-linux-x64-baseline`: Linux x64 (基线CPU，2013年前)
            - `ollama-proxy-linux-x64-modern`: Linux x64 (现代CPU，2013年后，性能更好)
            - `ollama-proxy-linux-arm64`: Linux ARM64
            
            ### Windows
            - `ollama-proxy-windows-x64.exe`: Windows x64 (现代CPU，2013年后)
            - `ollama-proxy-windows-x64-baseline.exe`: Windows x64 (基线CPU，2013年前)
            - `ollama-proxy-windows-x64-modern.exe`: Windows x64 (现代CPU，2013年后，性能更好)
            
            ### macOS
            - `ollama-proxy-darwin-x64`: macOS x64
            - `ollama-proxy-darwin-arm64`: macOS ARM64 (Apple Silicon)
            
            ## 系统要求
            
            - Linux: glibc
            - Windows: 无特殊要求
            - macOS: 无特殊要求
            
            ## 使用说明
            
            下载对应平台的可执行文件后，直接运行即可。
            
            例如，在Linux x64系统上：
            ```bash
            chmod +x ollama-proxy-linux-x64
            ./ollama-proxy-linux-x64
            ```
          files: dist/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
